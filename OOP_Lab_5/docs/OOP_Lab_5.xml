<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OOP_Lab_5</name>
    </assembly>
    <members>
        <member name="T:OOP_Lab_5.Core.Algorithms.IFindDeterminant">
            <summary>
            Interface of matrix FindDeterminant algorithm.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.IFindDeterminant.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets determinant of passed matrix.
            </summary>
            <param name="matrix">Matrix whose determinant will be found.</param>
            <returns>Determinant of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.IFindRank">
            <summary>
            Interface of matrix FindRank algorithm.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.IFindRank.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets rank of passed matrix.
            </summary>
            <param name="matrix">Matrix whose rank will be found.</param>
            <returns>Rank of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.IMultiply">
            <summary>
            Interface of matrix Multiply algorithm.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.IMultiply.Execute(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets new matrix that equals to multiplication of passed matrixes.
            </summary>
            <param name="left">Left matrix argument of matrix multiplication operation.</param>
            <param name="right">Right matrix argument of matrix multiplication operation.</param>
            <returns>New matrix that equals to multiplication of passed matrixes.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.ITriangular">
            <summary>
            Interface of matrix Triangular algorihm.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.ITriangular.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets new triangular matrix of passed matrix.
            </summary>
            <param name="matrix">Matrix that will be triangulared</param>
            <returns>New triangular matrix of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.LibraryFindDeterminant">
            <summary>
            Finds determinant of matrix using MathNet library algorithm.
            Implements IFindDeterminant interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.LibraryFindDeterminant.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets determinant of passed matrix.
            </summary>
            <param name="matrix">Matrix whose determinant will be found.</param>
            <returns>Determinant of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.LibraryFindRank">
            <summary>
            Finds rank of matrix using MathNet library algorithm.
            Implements IFindRank interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.LibraryFindRank.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets rank of passed matrix.
            </summary>
            <param name="matrix">Matrix whose rank will be found.</param>
            <returns>Rank of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.LibraryMultiply">
            <summary>
            Multiplies matrixes using MathNet library algorithm.
            Implements IMultiply interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.LibraryMultiply.Execute(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets new matrix that equals to multiplication of passed matrixes.
            </summary>
            <param name="left">Left matrix argument of matrix multiplication operation.</param>
            <param name="right">Right matrix argument of matrix multiplication operation.</param>
            <returns>New matrix that equals to multiplication of passed matrixes.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.LibraryTriangular">
            <summary>
            Triangulars matrix using MathNet library algorithm.
            Implements ITriangular interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.LibraryTriangular.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets new triangular matrix of passed matrix.
            </summary>
            <param name="matrix">Matrix that will be triangulared</param>
            <returns>New triangular matrix of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.NativeFindDeterminant">
            <summary>
            Finds determinant of matrix using native algorithm.
            Implements IFindDeterminant interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.NativeFindDeterminant.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets determinant of passed matrix.
            </summary>
            <param name="matrix">Matrix whose determinant will be found.</param>
            <returns>Determinant of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.NativeFindRank">
            <summary>
            Finds rank of matrix using native algorithm.
            Implements IFindRank interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.NativeFindRank.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets rank of passed matrix.
            </summary>
            <param name="matrix">Matrix whose rank will be found.</param>
            <returns>Rank of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.NativeMultiply">
            <summary>
            Multiplies matrixes using native algorithm.
            Implements IMultiply interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.NativeMultiply.Execute(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets new matrix that equals to multiplication of passed matrixes.
            </summary>
            <param name="left">Left matrix argument of matrix multiplication operation.</param>
            <param name="right">Right matrix argument of matrix multiplication operation.</param>
            <returns>New matrix that equals to multiplication of passed matrixes.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Algorithms.NativeTriangular">
            <summary>
            Triangulars matrix using native algorithm.
            Implements ITriangular interface.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Algorithms.NativeTriangular.Execute(OOP_Lab_5.Core.Matrix)">
            <summary>
            Gets new triangular matrix of passed matrix.
            </summary>
            <param name="matrix">Matrix that will be triangulared</param>
            <returns>New triangular matrix of passed matrix.</returns>
        </member>
        <member name="T:OOP_Lab_5.Core.Iterators.MatrixEnumenator">
            <summary>
            Represents matrix iterator.
            Provides access to matrix elements.
            Implements IEnumerator interface.
            Implements iterator pattern.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Core.Iterators.MatrixEnumenator._matrix">
            <summary>
            Encapsulated matrix instance.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Core.Iterators.MatrixEnumenator._column">
            <summary>
            Column iterator.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Core.Iterators.MatrixEnumenator._row">
            <summary>
            Row iterator.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Iterators.MatrixEnumenator.Current">
            <summary>
            Provides access to element with _row and _column indexes.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Iterators.MatrixEnumenator.#ctor(OOP_Lab_5.Core.Matrix)">
            <summary>
            Constructs MatrixEnumenator instance.
            </summary>
            <param name="matrix">Matrix to be encapsulated.</param>
        </member>
        <member name="M:OOP_Lab_5.Core.Iterators.MatrixEnumenator.MoveNext">
            <summary>
            Moves iterator to next position.
            </summary>
            <returns>False if collection is ended, true if is not</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Iterators.MatrixEnumenator.Reset">
            <summary>
            Moves iterator to begin.
            </summary>
        </member>
        <member name="T:OOP_Lab_5.Core.Matrix">
            <summary>
            Represents square matrix and basic operations with it.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Core.Matrix._matrix">
            <summary>
            2d square list, consists of matrix elements.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Matrix.Count">
            <summary>
            Count of rows and columns in matrix.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Matrix.FindDeterminantAlgorithm">
            <summary>
            Find determinant algorithm.
            Used in FindDeterminant method.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Matrix.FindRankAlgorithm">
            <summary>
            Find rank algorithm.
            Used in FindRank method.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Matrix.TriangularAlgorithm">
            <summary>
            Triangular algorithm.
            Used in Triangular method.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Matrix.MultiplyAlgorithm">
            <summary>
            Triangular algorithm.
            Used in overloaded multiply operator and in Square method.
            Implements strategy pattern.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.#ctor(System.Int64[0:,0:])">
            <summary>
            Constructs Matrix with passed 2d array.
            </summary>
            <param name="matrix">2d square array used to initialize matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Int64}})">
            <summary>
            Constructs Matrix with passed 2d list.
            </summary>
            <param name="matrix">2d square list used to initialize matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.#ctor(System.Int32)">
            <summary>
            Constructs square zero matrix with passed count of rows and columns.
            </summary>
            <param name="count">Count of rows and columns to initialize matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.#ctor(OOP_Lab_5.Core.Matrix)">
            <summary>
            Constructs matrix that equals to passed.
            </summary>
            <param name="other">Other matrix, values of it are used to initialize this matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.op_UnaryNegation(OOP_Lab_5.Core.Matrix)">
            <summary>
            Overloaded unary subtraction operator.
            Gets new matrix that equals to passed matrix multiplied by -1.
            </summary>
            <param name="matrix">Matrix argument that will be multiplied by -1.</param>
            <returns>New matrix that equals to passed matrix multiplied by -1.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.op_Addition(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Matrix)">
            <summary>
            Overloaded binary addition operator.
            Gets new matrix that equals to addition of passed matrixes.
            </summary>
            <param name="left">Left matrix argument of matrix addition operation.</param>
            <param name="right">Right matrix argument of matrix addition operation.</param>
            <returns>New matrix that equals to addition of passed matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.op_Subtraction(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Matrix)">
            <summary>
            Overloaded binary subtraction operator.
            Gets new matrix that equals to subtraction of passed matrixes.
            </summary>
            <param name="left">Left matrix argument of matrix subtraction operation.</param>
            <param name="right">Right matrix argument of matrix subtraction operation.</param>
            <returns>New matrix that equals to subtraction of passed matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.op_Multiply(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Matrix)">
            <summary>
            Overloaded multiplication operator. 
            Gets new matrix that equals to multiplication of passed matrixes.
            Uses strategy pattern and MultiplyAlgorithm variable.
            If MultiplyAlgorithm variable was not initialized or is null,
            it will be assigned with NativeMultiply instance.
            </summary>
            <param name="left">Left matrix argument of matrix multiplication operation.</param>
            <param name="right">Right matrix argument of matrix multiplication operation.</param>
            <returns>New matrix that equals to multiplication of passed matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.op_Multiply(OOP_Lab_5.Core.Matrix,System.Int64)">
            <summary>
            Overloaded multiplication operator. 
            Gets new matrix that equals to passed matrix multiplicated by passed scalar value.
            </summary>
            <param name="left">Left matrix argument of matrix multiplication on scalar operation.</param>
            <param name="right">Scalar value.</param>
            <returns>New matrix that equals to passed matrix multiplicated by passed scalar value.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.op_Multiply(System.Int64,OOP_Lab_5.Core.Matrix)">
            <summary>
            Overloaded multiplication operator. 
            Gets new matrix that equals to passed matrix multiplicated by passed scalar value.
            </summary>
            <param name="left">Scalar value.</param>
            <param name="right">Left matrix argument of matrix multiplication on scalar operation.</param>
            <returns>New matrix that equals to passed matrix multiplicated by passed scalar value.</returns>
        </member>
        <member name="P:OOP_Lab_5.Core.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Overloaded indexer operator.
            Gets access to element of matrix with indexes i and j.
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Equals(System.Object)">
            <summary>
            Overrided equals method.
            Checks, if this and passed object are equals.
            </summary>
            <param name="otherObject">Passed object will be checked, if it equals to this object.</param>
            <returns>True if this and passed object are equals, false if not.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.GetHashCode">
            <summary>
            Overrided GetHashCode method.
            <exception cref="T:System.NotImplementedException">This method is not implemented</exception>
            </summary>
            <returns>Hash code of this object</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.GetList">
            <summary>
            Gets 2d list with matrix elements.
            </summary>
            <returns>2d list with matrix elements</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.GetArray">
            <summary>
            Gets 2d array with matrix elements.
            </summary>
            <returns>2d array with matrix elements.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.FindDeterminant">
            <summary>
            Finds determinant of this matrix.
            Uses strategy pattern and FindDeterminantAlgorithm variable.
            If FindDeterminantAlgorithm variable was not initialized or is null,
            it will be assigned with NativeFindDeterminant instance.
            </summary>
            <returns>Return determinant of matrix</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            matrix.FindDeterminantAlgorithm = new LibraryFindDeterminant();
            var det = matrix.FindDeterminant();
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.FindRank">
            <summary>
            Finds determinant of this matrix.
            Uses strategy pattern and FindRankAlgorithm variable.
            If FindRankAlgorithm variable was not initialized or is null,
            it will be assigned with NativeFindRank instance.
            </summary>
            <returns>Return rank of matrix</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            matrix.FindRankAlgorithm = new LibraryFindRank();
            var rank = matrix.FindRank();
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.ChangeCount(System.Int32)">
            <summary>
            Gets new matrix with changed count of rows and columns.
            </summary>
            <param name="count">Count of rows and columns in new matrix.</param>
            <returns>New matrix with changed count of rows and columns.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Triangular">
            <summary>
            Gets new triangular matrix of this.
            Uses strategy pattern and TriangularAlgorithm variable.
            If TriangularAlgorithm variable was not initialized or is null,
            it will be assigned with NativeTriangular instance.
            </summary>
            <returns>New triangular matrix based on this.</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            matrix.TriangularAlgorithm = new LibraryTriangular();
            var triangularMatrix = matrix.FindTriangular();
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Transpose">
            <summary>
            Gets new transposed matrix of this.
            </summary>
            <returns>New transposed matrix of this.</returns>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Square">
            <summary>
            Gets new matrix that equals to this powered by two.
            Uses strategy pattern and MultiplyAlgorithm variable.
            If MultiplyAlgorithm variable was not initialized or is null,
            it will be assigned with NativeMultiply instance.
            </summary>
            <returns>New matrix that equals to this powered by two.</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            matrix.MultiplyAlgorithm = new LibraryMultiply();
            var squareMatrix = matrix.Square();
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Clone">
            <summary>
            Gets prototype of this matrix.
            Uses prototype pattern.
            </summary>
            <returns>Prototype of this matrix.</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            var prototype = matrix.Clone();
            var matrixCloned = (Matrix)prototype;
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.GetEnumerator">
            <summary>
            Gets enumenator of this matrix.
            It allows to use foreach loop with instances of this class.
            Uses iterator pattern.
            </summary>
            <returns>Enumenator of this matrix.</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            foreach (element in matrix)
            {
            ...
            }
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Save">
            <summary>
            Gets memento of this matrix.
            Uses memento pattern.
            </summary>
            <returns>Memento of this matrix.</returns>
            <example>
            <code>
            var matrix = new Matrix(...);
            var matrixMemento = matrix.Save();
            ...
            matrix.Restore(matrixMemento);
            </code>
            </example>
        </member>
        <member name="M:OOP_Lab_5.Core.Matrix.Restore(OOP_Lab_5.Core.Memento.IMatrixMemento)">
            <summary>
            Restores this matrix, using memento pattern.
            </summary>
            <param name="memento">Memento instance to restore matrix.</param>
            <example>
            <code>
            var matrix = new Matrix(...);
            var matrixMemento = matrix.Save();
            ...
            matrix.Restore(matrixMemento);
            </code>
            </example>
        </member>
        <member name="T:OOP_Lab_5.Core.Memento.IMatrixMemento">
            <summary>
            Represents interface for matrix storage that can be used to restore matrix data.
            Implements memento pattern.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Memento.IMatrixMemento.Matrix">
            <summary>
            Matrix elements.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Memento.IMatrixMemento.Count">
            <summary>
            Count of rows and columns.
            </summary>
        </member>
        <member name="T:OOP_Lab_5.Core.Memento.MatrixHistory">
            <summary>
            Represents storage of matrixes that can be used to restore and backup matrixes.
            Implements memento pattern.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Core.Memento.MatrixHistory._history">
            <summary>
            History of matrix changes.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Memento.MatrixHistory.Matrix">
            <summary>
            Encapsulated matrix.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Memento.MatrixHistory.#ctor(OOP_Lab_5.Core.Matrix)">
            <summary>
            Constructs MatrixHistory instance.
            </summary>
            <param name="matrix">Matrix to be encapsulated</param>
        </member>
        <member name="M:OOP_Lab_5.Core.Memento.MatrixHistory.Backup">
            <summary>
            Backups matrix data to the storage.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Memento.MatrixHistory.Undo">
            <summary>
            Restore matrix data, undoes to the last backup.
            </summary>
        </member>
        <member name="T:OOP_Lab_5.Core.Memento.MatrixMemento">
            <summary>
            Represents matrix storage that can be used to restore matrix data.
            Implements IMatrixMemento interface.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Memento.MatrixMemento.Matrix">
            <summary>
            Matrix elements.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Core.Memento.MatrixMemento.Count">
            <summary>
            Count of rows and columns.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Memento.MatrixMemento.#ctor(System.Collections.Generic.List{System.Collections.Generic.List{System.Int64}})">
            <summary>
            Constructs MatrixMemento instance.
            </summary>
            <param name="matrix">Elements of matrix to be stored.</param>
        </member>
        <member name="T:OOP_Lab_5.Core.Prototype.IPrototype">
            <summary>
            Represents interface for cloneable objects.
            Implements prototype pattern.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Core.Prototype.IPrototype.Clone">
            <summary>
            Creates clone of this object.
            </summary>
            <returns>clone of this object.</returns>
        </member>
        <member name="T:OOP_Lab_5.Data.DatabaseContext">
            <summary>
            Provides access to database
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Data.DatabaseContext.Matrixes">
            <summary>
            Set of MatrixEntity instances to be stored in database.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Data.DatabaseContext.#ctor">
            <summary>
            Constructs DatabaseContext instance.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Data.DatabaseContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Configures database connection.
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="T:OOP_Lab_5.Data.Entities.BaseEntity`1">
            <summary>
            Abstract base class for entities.
            Provides id getter and setter.
            </summary>
            <typeparam name="T">Id type</typeparam>
        </member>
        <member name="P:OOP_Lab_5.Data.Entities.BaseEntity`1.Id">
            <summary>
            Provides getter and setter for Id.
            </summary>
        </member>
        <member name="T:OOP_Lab_5.Data.Entities.MatrixEntity">
            <summary>
            Represents matrix entity for database storage.
            Inherits BaseEntity class.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Data.Entities.MatrixEntity.Id">
            <summary>
            Id of this instance.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Data.Entities.MatrixEntity.Matrix">
            <summary>
            Matrix, which stored in string.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Data.Entities.MatrixEntity.Count">
            <summary>
            Count of rows and columns.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Data.Entities.MatrixEntity.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Data.Entities.MatrixEntity.#ctor(System.String,OOP_Lab_5.Core.Matrix)">
            <summary>
            Constructs entity of passed matrix.
            </summary>
            <param name="id">Id to be stored.</param>
            <param name="matrix">Matrix, to be transformed to string.</param>
        </member>
        <member name="M:OOP_Lab_5.Data.Entities.MatrixEntity.Stringify(OOP_Lab_5.Core.Matrix)">
            <summary>
            Transforms matrix to string.
            </summary>
            <param name="matrix">Matrix to be transformed to string</param>
        </member>
        <member name="M:OOP_Lab_5.Data.Entities.MatrixEntity.ToMatrix">
            <summary>
            Gets Matrix instance, based on this.
            </summary>
            <returns>New matrix, based on this.</returns>
        </member>
        <member name="T:OOP_Lab_5.Decorators.MatrixFacadeDecorator">
            <summary>
            Represents base decorator for MatrixFacade class.
            Implements decorator pattern.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Decorators.MatrixFacadeDecorator._facade">
            <summary>
            Encapsulated MatrixFacade instance.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Matrix">
            <summary>
            Matrix getter.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.#ctor(OOP_Lab_5.Facade.IMatrixFacade)">
            <summary>
            Constructs MatrixFacadeDecorator instance.
            </summary>
            <param name="facade">MatrixFacade to be encapsulated</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Transpose">
            <summary>
            Calls Transpose method of MatrixFacade instance.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Determinant(OOP_Lab_5.Core.Algorithms.IFindDeterminant)">
            <summary>
            Calls Determinant method of MatrixFacade instance.
            </summary>
            <param name="det">Passed algorithm for determinant find.</param>
            <returns>Matrix determinant.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Rank(OOP_Lab_5.Core.Algorithms.IFindRank)">
            <summary>
            Calls Rank method of MatrixFacade instance.
            </summary>
            <param name="rank">Passed algorithm for rank find.</param>
            <returns>Matrix rank</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Square(OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Calls Square method of MatrixFacade instance.
            </summary>
            <param name="mul">Passed algorithm for matrix multiply.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Triangular(OOP_Lab_5.Core.Algorithms.ITriangular)">
            <summary>
            Calls Triangular method of MatrixFacade instance.
            </summary>
            <param name="triangular">Passed algorithm for matrix triangular.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.MultiplyOnScalar(System.Int64)">
            <summary>
            Calls MultiplyOnScalar method of MatrixFacade instance.
            </summary>
            <param name="scalar">Scalar</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.SaveToDb(System.String)">
            <summary>
            Calls SaveToDb method of MatrixFacade instance.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.LoadFromDb(System.String)">
            <summary>
            Calls LoadFromDb method of MatrixFacade instance.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.ChangeSize(System.Int32)">
            <summary>
            Calls ChangeSize method of MatrixFacade instance.
            </summary>
            <param name="size">Size of matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Copy">
            <summary>
            Calls Copy method of MatrixFacade instance.
            </summary>
            <returns>Matrix copy.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Paste(OOP_Lab_5.Core.Prototype.IPrototype)">
            <summary>
            Calls Paste method of MatrixFacade instance.
            </summary>
            <param name="matrix">Matrix to be pasted.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Undo">
            <summary>
            Calls Undo method of MatrixFacade instance.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Add(OOP_Lab_5.Core.Matrix)">
            <summary>
            Calls Add method of MatrixFacade instance.
            </summary>
            <param name="other">Other matrix to be added.</param>
            <returns>New matrix that equals to adddition of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Diff(OOP_Lab_5.Core.Matrix)">
            <summary>
            Calls Diff method of MatrixFacade instance.
            </summary>
            <param name="other">Other matrix to be subtracted from this.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.MatrixFacadeDecorator.Multiply(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Calls Multiply method of MatrixFacade instance.
            </summary>
            <param name="other">Other matrix to be multiplied to this.</param>
            <param name="mul">Passed algorithm for matrix multiply.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="T:OOP_Lab_5.Decorators.TimeDecorator">
            <summary>
            Represents decorator for MatrixFacade class.
            Measures time of algorithms.
            Inherits MatrixFacadeDecorator class.
            Implements decorator pattern.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Decorators.TimeDecorator.Time">
            <summary>
            Time of last launched algorithm.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.#ctor(OOP_Lab_5.Facade.IMatrixFacade)">
            <summary>
            Constructs TimeDecorator instance.
            </summary>
            <param name="facade">MatrixFacade to be encapsulated</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Transpose">
            <summary>
            Measures the time of the algorithm.
            Calls Transpose method of MatrixFacade instance.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Determinant(OOP_Lab_5.Core.Algorithms.IFindDeterminant)">
            <summary>
            Measures the time of the algorithm.
            Calls Determinant method of MatrixFacade instance.
            </summary>
            <param name="det">Passed algorithm for determinant find.</param>
            <returns>Matrix determinant.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Rank(OOP_Lab_5.Core.Algorithms.IFindRank)">
            <summary>
            Measures the time of the algorithm.
            Calls Rank method of MatrixFacade instance.
            </summary>
            <param name="rank">Passed algorithm for rank find.</param>
            <returns>Matrix rank</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Square(OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Measures the time of the algorithm.
            Calls Square method of MatrixFacade instance.
            </summary>
            <param name="mul">Passed algorithm for matrix multiply.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Triangular(OOP_Lab_5.Core.Algorithms.ITriangular)">
            <summary>
            Measures the time of the algorithm.
            Calls Triangular method of MatrixFacade instance.
            </summary>
            <param name="triangular">Passed algorithm for matrix triangular.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.MultiplyOnScalar(System.Int64)">
            <summary>
            Measures the time of the algorithm.
            Calls MultiplyOnScalar method of MatrixFacade instance.
            </summary>
            <param name="scalar">Scalar</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.SaveToDb(System.String)">
            <summary>
            Measures the time of the algorithm.
            Calls SaveToDb method of MatrixFacade instance.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.LoadFromDb(System.String)">
            <summary>
            Measures the time of the algorithm.
            Calls LoadFromDb method of MatrixFacade instance.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.ChangeSize(System.Int32)">
            <summary>
            Measures the time of the algorithm.
            Calls ChangeSize method of MatrixFacade instance.
            </summary>
            <param name="size">Size of matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Copy">
            <summary>
            Measures the time of the algorithm.
            Calls Copy method of MatrixFacade instance.
            </summary>
            <returns>Matrix copy.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Paste(OOP_Lab_5.Core.Prototype.IPrototype)">
            <summary>
            Measures the time of the algorithm.
            Calls Paste method of MatrixFacade instance.
            </summary>
            <param name="matrix">Matrix to be pasted.</param>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Undo">
            <summary>
            Measures the time of the algorithm.
            Calls Undo method of MatrixFacade instance.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Add(OOP_Lab_5.Core.Matrix)">
            <summary>
            Measures the time of the algorithm.
            Calls Add method of MatrixFacade instance.
            </summary>
            <param name="other">Other matrix to be added.</param>
            <returns>New matrix that equals to adddition of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Diff(OOP_Lab_5.Core.Matrix)">
            <summary>
            Measures the time of the algorithm.
            Calls Diff method of MatrixFacade instance.
            </summary>
            <param name="other">Other matrix to be subtracted from this.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Decorators.TimeDecorator.Multiply(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Measures the time of the algorithm.
            Calls Multiply method of MatrixFacade instance.
            </summary>
            <param name="other">Other matrix to be multiplied to this.</param>
            <param name="mul">Passed algorithm for matrix multiply.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="T:OOP_Lab_5.Facade.IMatrixFacade">
            <summary>
            Represents main operation with matrix.
            It used like main interface of matrix operations.
            Implements facade pattern.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Facade.IMatrixFacade.Matrix">
            <summary>
            Encapsulated matrix instance.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Transpose">
            <summary>
            Transpose matrix.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Determinant(OOP_Lab_5.Core.Algorithms.IFindDeterminant)">
            <summary>
            Gets matrix determinant using passed algorithm.
            </summary>
            <param name="det">Passed algorithm for determinant find.</param>
            <returns>Matrix determinant.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Rank(OOP_Lab_5.Core.Algorithms.IFindRank)">
            <summary>
            Gets matrix rank using passed algorithm.
            </summary>
            <param name="rank">Passed algorithm for rank find.</param>
            <returns>Matrix rank</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Square(OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Square matrix using passed algorithm.
            </summary>
            <param name="mul">Passed algorithm for matrix multiply.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Triangular(OOP_Lab_5.Core.Algorithms.ITriangular)">
            <summary>
            Triangular matrix using passed algorithm.
            </summary>
            <param name="triangular">Passed algorithm for matrix triangular.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.MultiplyOnScalar(System.Int64)">
            <summary>
            Multiply matrix on scalra using passed algorithm.
            </summary>
            <param name="scalar">Scalar</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.SaveToDb(System.String)">
            <summary>
            Saves matrix instance to database with passed id.
            If database consists of passed id, method will update record with that id.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.LoadFromDb(System.String)">
            <summary>
            Loads matrix record from database with passed id.
            If database does not consist of passed id, method will throw exception.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.ChangeSize(System.Int32)">
            <summary>
            Changes size of matrix
            </summary>
            <param name="size">Size of matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Copy">
            <summary>
            Copies matrix.
            </summary>
            <returns>Matrix copy.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Paste(OOP_Lab_5.Core.Prototype.IPrototype)">
            <summary>
            Pastes matrix.
            </summary>
            <param name="matrix">Matrix to be pasted.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Undo">
            <summary>
            Undoes operations to last backup.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Add(OOP_Lab_5.Core.Matrix)">
            <summary>
            Adds this matrix to other.
            </summary>
            <param name="other">Other matrix to be added.</param>
            <returns>New matrix that equals to adddition of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Diff(OOP_Lab_5.Core.Matrix)">
            <summary>
            Subtracts other matrix from this.
            </summary>
            <param name="other">Other matrix to be subtracted from this.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.IMatrixFacade.Multiply(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Multiply other this to other using passed algorithm.
            </summary>
            <param name="other">Other matrix to be multiplied to this.</param>
            <param name="mul">Passed algorithm for matrix multiply.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="T:OOP_Lab_5.Facade.MatrixFacade">
            <summary>
            Represents main operation with matrix.
            Implements IMatrixFacade interface.
            Implements facade pattern.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Facade.MatrixFacade._db">
            <summary>
            Database connection.
            </summary>
        </member>
        <member name="F:OOP_Lab_5.Facade.MatrixFacade._history">
            <summary>
            History of operations.
            </summary>
        </member>
        <member name="P:OOP_Lab_5.Facade.MatrixFacade.Matrix">
            <summary>
            Matrix getter and private setter.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.#ctor(OOP_Lab_5.Core.Matrix)">
            <summary>
            Constructs class instance.
            </summary>
            <param name="matrix">Matrix to be encapsulated.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Transpose">
            <summary>
            Transpose matrix.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Determinant(OOP_Lab_5.Core.Algorithms.IFindDeterminant)">
            <summary>
            Gets matrix determinant using passed algorithm.
            </summary>
            <param name="det">Passed algorithm for determinant find</param>
            <returns>Matrix determinant.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Rank(OOP_Lab_5.Core.Algorithms.IFindRank)">
            <summary>
            Gets matrix rank using passed algorithm.
            </summary>
            <param name="rank">Passed algorithm for rank find.</param>
            <returns>Matrix rank</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Square(OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Square matrix using passed algorithm.
            </summary>
            <param name="mul">Passed algorithm for matrix multiply.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Triangular(OOP_Lab_5.Core.Algorithms.ITriangular)">
            <summary>
            Triangular matrix using passed algorithm.
            </summary>
            <param name="triangular">Passed algorithm for matrix triangular.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.MultiplyOnScalar(System.Int64)">
            <summary>
            Multiply matrix on scalra using passed algorithm.
            </summary>
            <param name="scalar">Scalar</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.SaveToDb(System.String)">
            <summary>
            Saves matrix instance to database with passed id.
            If database consists of passed id, method will update record with that id.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.LoadFromDb(System.String)">
            <summary>
            Loads matrix record from database with passed id.
            If database does not consist of passed id, method will throw exception.
            </summary>
            <param name="id">Id of record.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.ChangeSize(System.Int32)">
            <summary>
            Changes size of matrix
            </summary>
            <param name="size">Size of matrix.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Copy">
            <summary>
            Copies matrix.
            </summary>
            <returns>Matrix copy.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Paste(OOP_Lab_5.Core.Prototype.IPrototype)">
            <summary>
            Pastes matrix.
            </summary>
            <param name="matrix">Matrix to be pasted.</param>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Undo">
            <summary>
            Undoes operations to last backup.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Add(OOP_Lab_5.Core.Matrix)">
            <summary>
            Adds this matrix to other.
            </summary>
            <param name="other">Other matrix to be added.</param>
            <returns>New matrix that equals to adddition of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Diff(OOP_Lab_5.Core.Matrix)">
            <summary>
            Subtracts other matrix from this.
            </summary>
            <param name="other">Other matrix to be subtracted from this.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="M:OOP_Lab_5.Facade.MatrixFacade.Multiply(OOP_Lab_5.Core.Matrix,OOP_Lab_5.Core.Algorithms.IMultiply)">
            <summary>
            Multiply other this to other using passed algorithm.
            </summary>
            <param name="other">Other matrix to be multiplied to this.</param>
            <param name="mul">Passed algorithm for matrix multiply.</param>
            <returns>New matrix that equals to substraction of this and other matrixes.</returns>
        </member>
        <member name="F:OOP_Lab_5.Form.components">
            <summary>
             Required designer variable.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Form.Dispose(System.Boolean)">
            <summary>
             Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OOP_Lab_5.Form.InitializeComponent">
            <summary>
             Required method for Designer support - do not modify
             the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OOP_Lab_5.Program">
            <summary>
            Represents entry point for the application.
            </summary>
        </member>
        <member name="M:OOP_Lab_5.Program.Main">
            <summary>
             The main entry point for the application.
            </summary>
        </member>
    </members>
</doc>
